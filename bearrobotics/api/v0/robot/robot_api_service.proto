// File: robot_api_service.proto
//
// Copyright 2025 Bear Robotics, Inc. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

package bearrobotics.api.v0.robot;

import "bearrobotics/api/v0/common/annotations.proto";
import "bearrobotics/api/v0/common/math.proto";
import "bearrobotics/api/v0/location/annotation.proto";
import "bearrobotics/api/v0/location/location.proto";
import "bearrobotics/api/v0/location/map.proto";
import "bearrobotics/api/v0/robot/localization.proto";
import "bearrobotics/api/v0/robot/mission.proto";
import "bearrobotics/api/v0/robot/network.proto";
import "bearrobotics/api/v0/robot/robot.proto";
import "bearrobotics/api/v0/robot/settings.proto";
import "bearrobotics/api/v0/robot/status.proto";
import "bearrobotics/api/v0/robot/system.proto";

// RobotAPIService.
//
// The definition of Bear Robot API service.
service RobotAPIService {
  // === Map ===================================================================

  // Retrieve annotation data for a specified annotation_id from the Universe.
  //
  // If offline, it uses the cached Annotation data.
  rpc GetAnnotation(GetAnnotationRequest) returns (GetAnnotationResponse) {}

  // Retrieve the current location data to which the robot is connected from
  // the Universe.
  //
  // If the robot is offline, it uses the cached Location data.
  rpc GetLocation(GetLocationRequest) returns (GetLocationResponse) {}

  // Retrieve the map corresponding to a given map_id from the Universe.
  //
  // If offline, it uses the cached Map data.
  rpc GetMap(GetMapRequest) returns (GetMapResponse) {}

  // Retrieve the current map content data, which is loaded on the robot.
  rpc GetMapContent(GetMapContentRequest) returns (GetMapContentResponse) {}

  // Retrieve map data for a specified map_data_id from the Universe.
  //
  // If offline, it uses the cached MapData data.
  rpc GetMapData(GetMapDataRequest) returns (GetMapDataResponse) {}

  // Switches the current map to a specified map.
  //
  // The request should specify a floor level and section index to be used.
  // Returns the map_id of the switched map.
  rpc SwitchMap(SwitchMapRequest) returns (SwitchMapResponse) {}

  // === Mission ===============================================================

  // Appends the given mission to the end of the queue.
  // The mission will be added in the order it is received.
  rpc AppendMission(AppendMissionRequest) returns (AppendMissionResponse);

  // Create a mission to go charge a robot regardless of battery state.
  //
  // The call will fail if the robot is already on a different mission.
  // The current mission needs to be canceled before the robot can be charged.
  rpc ChargeRobot(ChargeRobotRequest) returns (ChargeRobotResponse) {}

  // Creates a mission for a given type.
  //
  // The call will fail if the robot cannot go on the requested mission.
  rpc CreateMission(CreateMissionRequest) returns (CreateMissionResponse) {}

  // Subscribe to robot's mission status.
  //
  // Upon subscription, the server immediately sends the latest known
  // mission status, followed by updates whenever the mission status changes.
  rpc SubscribeMissionStatus(SubscribeMissionStatusRequest)
      returns (stream SubscribeMissionStatusResponse) {}

  // Updates the specified mission with the given command.
  //
  // The call will fail if the robot is not on the specified mission
  // or cannot execute the command.
  rpc UpdateMission(UpdateMissionRequest) returns (UpdateMissionResponse) {}

  // === Navigation ============================================================

  // Manually drive the robot.
  //
  // A fine grained level manual drive control that allows the user to specify a
  // desired linear and angular velocity. The command will be smoothed by the
  // robot. The request message should be streamed at a rate of at least 5Hz for
  // smooth operation. If the frequency doesn't meet the requirements, it will
  // set the commanded velocity to zero.
  rpc DriveRobot(stream DriveRobotRequest) returns (DriveRobotResponse) {}

  // Localize the robot to a localization goal.
  //
  // If the goal is accepted, subcribe to SubscribeLocalizationStatus to get the
  // localization status.
  rpc LocalizeRobot(LocalizeRobotRequest) returns (LocalizeRobotResponse) {}

  // Enable or disable the emergency stop.
  rpc SetEmergencyStop (SetEmergencyStopRequest)
      returns (SetEmergencyStopResponse) {}

  // Manually set the robot pose given a pose on the map and covariance matrix.
  rpc SetPose(SetPoseRequest) returns (SetPoseResponse) {}

  // Subscribe to the software emergency stop state.
  //
  // Upon subscription, the server sends the current emergency stop state,
  // followed by updates whenever the emergency stop state changes.
  rpc SubscribeEmergencyStopStatus(SubscribeEmergencyStopStatusRequest)
      returns (stream SubscribeEmergencyStopStatusResponse) {}

  // Subscribe to the robot's localization status.
  //
  // Upon subscription, the latest known localization status will be sent.
  // If the robot is actively localizing, status will be published upon changes.
  rpc SubscribeLocalizationStatus(SubscribeLocalizationStatusRequest)
      returns (stream SubscribeLocalizationStatusResponse) {}

  // Subscribe to the robot's odometry status.
  //
  // Upon subscription, the server provides regular updates (5Hz) of the
  // odometry status.
  rpc SubscribeOdometryStatus(SubscribeOdometryStatusRequest)
      returns (stream SubscribeOdometryStatusResponse) {}

  // Subscribe to the robot's pose.
  //
  // Upon subscription, the server provides regular updates (5Hz) of the
  // robot's estimated position.
  rpc SubscribeRobotPose(SubscribeRobotPoseRequest)
      returns (stream SubscribeRobotPoseResponse) {}

  // === Settings ==============================================================

  // Set the specified setting.
  //
  // The request will be rejected if the setting key does not exists.
  rpc SetSetting(SetSettingRequest) returns (SetSettingResponse) {}

  // Upon subscription, the latest setting states will be sent. For every
  // setting change, a full snapshot of the states will be sent.
  rpc SubscribeSettings(SubscribeSettingsRequest)
      returns (stream SubscribeSettingsResponse) {}

  // === Status ================================================================

  // Subscribe to the robot's battery status.
  //
  // Upon subscription, the server immediately sends the latest known
  // battery status, followed by updates whenever the battery status changes.
  rpc SubscribeBatteryStatus(SubscribeBatteryStatusRequest)
      returns (stream SubscribeBatteryStatusResponse) {}

  // Subscribe to the robots's operation status.
  //
  // Upon subscription, the server immediately sends the latest known operation
  // status, followed by updates whenever the operation status changes.
  rpc SubscribeOperationStatus(SubscribeOperationStatusRequest)
      returns (stream SubscribeOperationStatusResponse) {}

  // === System ================================================================

  // Connect to a specified Wi-Fi network.
  //
  // SSID should be provided and nearby broadcasted networks may be scanned with
  // ListWifiConnections.
  rpc ConnectWifi(ConnectWifiRequest) returns (ConnectWifiResponse) {}

  // Forget a saved Wi-Fi network.
  //
  // When called, it forgets a Wi-Fi network identified by its ssid. The call
  // will fail if a network operation is in progress or the network is not
  // found.
  rpc ForgetWifi(ForgetWifiRequest) returns (ForgetWifiResponse);

  // Get the overall robot system information.
  //
  // When called, the server returns robot system information. The system info
  // tends to be static and does not change often.
  rpc GetSystemInfo(GetSystemInfoRequest) returns (GetSystemInfoResponse) {}

  // List available and remembered network connections.
  //
  // When called, the server returns lists of remembered Wi-Fi networks, which
  // may not necessarily be available, and returns lists of other available
  // networks.
  rpc ListWifiConnections(ListWifiConnectionsRequest)
      returns (ListWifiConnectionsResponse) {}

  // Execute a system command on the robot.
  //
  // Runs a system command. e.g. initiate robot reboot.
  // Refer to the SystemCommand proto for all available commands.
  rpc RunSystemCommand(RunSystemCommandRequest)
      returns (RunSystemCommandResponse) {}

  // Subscribe to the robot's network status.
  //
  // Upon subscription, the server immediately sends the latest known network
  // status, followed by updates whenever the network status changes.
  rpc SubscribeNetworkStatus(SubscribeNetworkStatusRequest)
      returns (stream SubscribeNetworkStatusResponse) {}

  // Subscribe to the robot's system status.
  //
  // Upon subscription, the server immediately sends the latest known system
  //status, followed by updates whenever the system status changes.
  rpc SubscribeSystemStatus(SubscribeSystemStatusRequest)
      returns (stream SubscribeSystemStatusResponse) {}
}

message AppendMissionRequest {
  Mission mission = 1;
}

message AppendMissionResponse {
  // The unique identifier of the appended mission.
  string mission_id = 1;
}

message ChargeRobotRequest {}

message ChargeRobotResponse {
  string mission_id = 1;
}

message ConnectWifiRequest {
  // SSID of Wi-Fi network.
  string ssid = 1;

  // Security details for the network.
  // This field can be omitted if the network is unsecure.
  optional Authentication authentication = 2;

  // Optional parameters for static IP configuration.
  optional ConnectionOptions connection_options = 3;
}

message ConnectWifiResponse {}

message CreateMissionRequest {
  Mission mission = 1;
}

message CreateMissionResponse {
  string mission_id = 1;
}

message DriveRobotRequest {
  // The desired max linear and angular velocity to travel.
  common.Twist twist = 1;
}

message DriveRobotResponse {}

message ForgetWifiRequest {
  string ssid = 1;
}

message ForgetWifiResponse {}

message GetAnnotationRequest {
  string annotation_id = 1;
}

message GetAnnotationResponse {
  location.Annotation annotation = 1;
}

message GetLocationRequest {}

message GetLocationResponse {
  location.Location location = 1;
}

message GetMapRequest {
  string map_id = 1;
}

message GetMapResponse {
  location.Map map = 1;
}

message GetMapContentRequest {}

message GetMapContentResponse {
  location.MapContent map_content = 1;
}

message GetMapDataRequest {
  string map_data_id = 1;
}

message GetMapDataResponse {
  location.MapData map_data = 1;
}

message GetSystemInfoRequest {}

message GetSystemInfoResponse {
  SystemInfo system_info = 1;
}

message ListWifiConnectionsRequest {}

message ListWifiConnectionsResponse {
  WifiConnections wifi_connections = 1;
}

message LocalizeRobotRequest {
  v0.robot.LocalizationGoal goal = 1;
}

message LocalizeRobotResponse {}

message RunSystemCommandRequest {
  SystemCommand system_command = 1;
}

message RunSystemCommandResponse {}

message SetEmergencyStopRequest {
  robot.EmergencyStopState e_stop_state = 1;
}

message SetEmergencyStopResponse {}

message SetPoseRequest {
  // A pose and a covariance matrix, if the covariance is not set,
  // the internal default values will be applied.
  PoseWithCovariance pose_with_covariance = 1;
}

message SetPoseResponse {}

message SetSettingRequest {
  Setting setting = 1;
}

message SetSettingResponse {}

message SubscribeBatteryStatusRequest {}

message SubscribeBatteryStatusResponse {
  common.EventMetadata metadata = 1;
  BatteryState battery_state = 2;
}

message SubscribeEmergencyStopStatusRequest {}

message SubscribeEmergencyStopStatusResponse {
  common.EventMetadata metadata = 1;
  robot.EmergencyStopState e_stop_state = 2;
}

message SubscribeLocalizationStatusRequest {}

message SubscribeLocalizationStatusResponse {
  common.EventMetadata metadata = 1;
  robot.LocalizationState localization_state = 2;
}

message SubscribeMissionStatusRequest {}

message SubscribeMissionStatusResponse {
  common.EventMetadata metadata = 1;
  MissionState mission_state = 2;
}

message SubscribeNetworkStatusRequest {}

message SubscribeNetworkStatusResponse {
  common.EventMetadata metadata = 1;
  NetworkState network_state = 2;
}

message SubscribeOdometryStatusRequest {}

message SubscribeOdometryStatusResponse {
  common.EventMetadata metadata = 1;
  OdometryState odometry_state = 2;
}

message SubscribeOperationStatusRequest {}

message SubscribeOperationStatusResponse {
  common.EventMetadata metadata = 1;
  OperationState operation_state = 2;
}

message SubscribeRobotPoseRequest {}

message SubscribeRobotPoseResponse {
  common.EventMetadata metadata = 1;
  Pose pose = 2;
}

message SubscribeSettingsRequest {}

message SubscribeSettingsResponse {
  common.EventMetadata metadata = 1;
  robot.SettingsState settings_state = 2;
}

message SubscribeSystemStatusRequest {}

message SubscribeSystemStatusResponse {
  common.EventMetadata metadata = 1;
  SystemState system_state = 2;
}

message SwitchMapRequest {
  int32 floor_level = 1;
  int32 section_index = 2;
}

message SwitchMapResponse {
  string map_id = 1;
}

message UpdateMissionRequest {
  MissionCommand mission_command = 1;
}

message UpdateMissionResponse {}
